PROTOCOL VERSION: 1

Protocol structure:

In effort to easen debugging as well as for academic illustration, the
protocol will be largely text-based, with keywords and commands given in
English.

The protocol will be divided into two fundamental parts; the routing header
and the content. The routing header is in charge of determining where a packet
is sent, the content is in charge of transmitting information and negotiating
interactions.

A single packet will be divided into “sections”; each of these consist of a
keyword as well as multiple parameters. Sections will be separated by
semicolons, with keywords/parameters being separated by spaces. A field which
needs to contain spaces, eg. as part of a message or name, will be specified
as base 64 encoded.

The separation between the routing header and the content is to be done using
a ‘|’ character.

Integers will be encoded as arbitrary precision integers using a little endian
coding scheme. Floating point numbers will be encoded as little endian 64-bit
IEEE754 doubles.

IDs (public keys) will be encoded as followed:

<2 bytes>  key size s
<s bytes>  public n
<rest>     public e

All three fields are encoded as Integers (see above).

Text will be encoded as UTF-8 in all scenarios.

Legend:

  > NAME
  A literal, will appear as-is and is case insensitive.

  > <NAME>
  A placeholder, see description.

  > {NAME}
  A placeholder for a base 64 encoded value.

  > [NAME]
  A placeholder that is optional (see description). Further modifiers apply.

  > {%NAME}
  A placeholder for an AES-encrypted, base 64 encoded value.

  > {#NAME}
  A placeholder for an RSA-encrypted, base 64 encoded value.

  > {%?NAME}
  > {#?NAME}
  Same as the above two, but optionally encrypted (see description).

  > {NAME.SIGNATURE}
  A cryptographic RSA signature for the NAME field. If a packet contains any
  section where the FIELD.SIGNATURE does not verify using FIELD and the id
  given in SOURCE; the packet must be dropped immediately and without further
  notice. Signatures need not be encrypted.

  (For illustrative purposes, fields marked as encrypted will not actually
  be encrypted in the examples given below. Similarly, fields marked as base
  64 encoded will be surrounded by curly braces in the examples and given in
  plaintext instead.)


Routing header:

The routing header may contain the following sections:


  TARGET section:

  > TARGET <TYPE> [{ADDRESS}]

  “TYPE” may either “GLOBAL”, to indicate a global packet, “EXACT” to indicate
  a packet sent to a single destination node, or “APPROX” to indicate a
  DHT-style proximity route where the target is the /closest/ node to given
  ADDRESS.

  ADDRESS must be present if type is “EXACT” or “APPROX”, and may not be
  present if type is “GLOBAL”, and indicates the recipient of the packet.

  Examples:

  > TARGET GLOBAL
  > TARGET EXACT {0.784}
  > TARGET APPROX {0.321}


  SOURCE section:

  > SOURCE {ID} {ID.SIGNATURE}

  “ID” must be the identifying public key of the packet's original sender.

  Examples:

  > SOURCE 3f1f10b8d7 {3f1f10b8d7}


  SOURCEADDR section:

  > SOURCEADDR {ADDRESS} {ADDRESS.SIGNATURE}

  “ADDRESS” corresponds to the original sender's address. This section is
  entirely optional, and serves mainly to speed up negotiatons. However, it is
  to be noted that it can not necessarily be trusted. If it is missing, the
  return address will instead be queried from the DHT.

  Examples:

  > SOURCEADDR {0.513}


  VERSION section:

  > VERSION {VER}

  Indicates the protocol version needed to generate and/or understand the
  packet. Clients are free to ignore this and proceed with caution, as the
  core routing protocol /should/ stay reasonably backwards compatible.
  However, the client is strongly urged to display a warning to the user
  notifying him of outdated or incompatible software.

  Examples:

  > VERSION {1}


  SUPPORT section:

  > SUPPORT {VER}

  Indicates support for a given protocol version. If present, the recipient is
  advised to remember this protocol support and respect it for backwards
  compatibility. However, this is not a requirement per se; and a
  specification-conforming client can choose to ignore it. The user of
  outdated software puts himself at risk of non-interoparability, not the
  other way round.

  The version number includes retroactive support; it is implied that a client
  supporting version n also supports n-1, n-2, ... 1.

  Examples:

  > SUPPORT {4}


  DROP section:

  > DROP {ADDRESS}

  A previous packet could not be routed to ADDRESS. This is a permanent
  routing error.

  Examples:

  > DROP {0.2129}


  IDENTIFY section:

  > IDENTIFY

  A special identification section. This section must never be routed to other
  peers, it is solely for identifying new peers after connecting to them.

  The receiving peer must reply with an IAM section.


  IAM section:

  > IAM {ID} {ADDRESS}

  A special identification section. This section must never be routed to other
  peers, it is solely for identifying new peers after connectiong to them.


  PEER section:

  > PEER {HOSTNAME}

  A special peer discovery section, used in case of connection loss and for
  the initial dial-in.


  PANIC section:

  > PANIC

  A special section used for when the number on connections on either side
  drops below the critical value (eg. 3), a client sent this should respond with
  PEER for every known peer on his end.


The routing header must adhere to the following rules:

- The TARGET section must be present (unless packet is no-route)
- The SOURCE section must be present (unless packet is no-route)
- If the packet contains any IDENTIFY, IAM, PANIC or PEER, it is no-route and
  must never be routed under any circumstances.

Any packets not complying with these restrictions shall be discarded
immediately and without further notice.

Any packets received before an “IAM” shall be ignored silently and responded
to with an “IDENTIFY”. A peer must identify itself before it can send packets.


Content:

The content may content the following sections:


  = Delivering messages =

  MESSAGE section:

  > MESSAGE <TYPE> {%?DATA} {DATA.SIGNATURE}

  A simple textual message. “TYPE” may be “GLOBAL”, “CHANNEL” or “SINGLE”.
  SINGLE and CHANNEL messages will contain encrypted DATA, GLOBAL messages
  will not.

  CHANNEL messages will be encrypted using a key obtained from running the
  SHA-256 function on the intended channel name.

  Examples:

  > MESSAGE GLOBAL {Hello, world!}
  > MESSAGE CHANNEL {Very secret channel message.}
  > MESSAGE SINGLE {Extremely confidential royal bank information}


  = Negotiating connection parameters =

  KEY section:

  > KEY {#DATA} {DATA.SIGNATURE}

  Contains the agreed upon AES key in use for point to point communications.

  Examples:

  > KEY {Heavily encrypted key goes here}


  = Querying the id table =

  WHOIS section:

  > WHOIS {NAME}

  Look up NAME in the recipient's id table.

  Examples:

  > WHOIS {nand}


  THISIS section:

  > THISIS {NAME} {ID}

  Contains the reply of a previous WHOIS inquiry.

  Examples:

  > THISIS {nand} {4c3e72}


  NOEXIST section:

  > NOEXIST {NAME}

  NAME does not exist in the DHT (is therefore available). Reply to WHOIS.

  Examples:

  > NOEXIST {xor}


  = Querying the location table =

  WHEREIS section:

  > WHEREIS {ID}

  Look up ID in the recipient's location table.

  Examples:

  > WHEREIS {4c3e72}


  HEREIS section:

  > HEREIS {ID} {ADDRESS}

  Contains the reply of a previous WHEREIS inquiry.

  Examples:

  > HEREIS {4c3e72} {0.82735}


  NOTFOUND section:

  > NOTFOUND {ID}

  ID has not been found and is therefore most likely offline. Reply to
  WHEREIS.

  Examples:

  > NOTFOUND {4c3e72}


  = Upating the location table =

  UPDATE section:

  > UPDATE {ADDRESS} {ADDRESS.SIGNATURE}

  Update or insert the sender's location in the location table. Reply is
  HEREIS with the new values on success.

  Examples:

  > UPDATE {0.29834} {0.29834}


  = Adding new entries to the id table =

  REGISTER section:

  > REGISTER {NAME} {NAME.SIGNATURE}

  Register the sender into the id table, if not already existant. Reply is
  THISIS with the inserted values on success, and EXIST on failure.

  Examples:

  > REGISTER {xor} {xor}


  EXIST section:

  > EXIST {NAME}

  Response to an invalid REGISTER in case of an already existing id table
  entry.

  Examples:

  > EXIST {nand}


<TODO:>

- Add missing sections, eg. connection negotiation and repair.
